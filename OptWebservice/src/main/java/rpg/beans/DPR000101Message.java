package rpg.beans;

import rpg.core.CharacterField;
import rpg.core.DecimalField;
import rpg.core.MessageField;
import rpg.core.MessageRecord;

import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from DPR000101 physical file definition.
* 
* File level identifier is 1241001144248.
* Record format level identifier is 4453405229CE9.
*/

public class DPR000101Message extends MessageRecord
{
  final static String fldnames[] = {
                                     "H01USR",
                                     "H01PGM",
                                     "H01TIM",
                                     "H01SCR",
                                     "H01OPE",
                                     "H01MAS",
                                     "H01WK1",
                                     "H01WK2",
                                     "H01WK3",
                                     "E01NPR",
                                     "E01CUN",
                                     "E01IDN",
                                     "E01TID",
                                     "E01RTP",
                                     "E01STS",
                                     "E01EMA"
                                   };
  final static String tnames[] = {
                                   "H01USR",
                                   "H01PGM",
                                   "H01TIM",
                                   "H01SCR",
                                   "H01OPE",
                                   "H01MAS",
                                   "H01WK1",
                                   "H01WK2",
                                   "H01WK3",
                                   "E01NPR",
                                   "E01CUN",
                                   "E01IDN",
                                   "E01TID",
                                   "E01RTP",
                                   "E01STS",
                                   "E01EMA"
                                 };
  final static String fid = "1241001144248";
  final static String rid = "4453405229CE9";
  final static String fmtname = "DPR000101";
  final int FIELDCOUNT = 16;
  private static Hashtable tlookup = new Hashtable();
  private CharacterField fieldH01USR = null;
  private CharacterField fieldH01PGM = null;
  private CharacterField fieldH01TIM = null;
  private CharacterField fieldH01SCR = null;
  private CharacterField fieldH01OPE = null;
  private CharacterField fieldH01MAS = null;
  private CharacterField fieldH01WK1 = null;
  private CharacterField fieldH01WK2 = null;
  private CharacterField fieldH01WK3 = null;
  private DecimalField fieldE01NPR = null;
  private DecimalField fieldE01CUN = null;
  private CharacterField fieldE01IDN = null;
  private CharacterField fieldE01TID = null;
  private CharacterField fieldE01RTP = null;
  private CharacterField fieldE01STS = null;
  private CharacterField fieldE01EMA = null;

  /**
  * Constructor for DPR000101Message.
  */
  public DPR000101Message()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 157;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldH01USR =
    new CharacterField(message, HEADERSIZE + 0, 10, "H01USR");
    fields[1] = fieldH01PGM =
    new CharacterField(message, HEADERSIZE + 10, 10, "H01PGM");
    fields[2] = fieldH01TIM =
    new CharacterField(message, HEADERSIZE + 20, 12, "H01TIM");
    fields[3] = fieldH01SCR =
    new CharacterField(message, HEADERSIZE + 32, 2, "H01SCR");
    fields[4] = fieldH01OPE =
    new CharacterField(message, HEADERSIZE + 34, 4, "H01OPE");
    fields[5] = fieldH01MAS =
    new CharacterField(message, HEADERSIZE + 38, 1, "H01MAS");
    fields[6] = fieldH01WK1 =
    new CharacterField(message, HEADERSIZE + 39, 1, "H01WK1");
    fields[7] = fieldH01WK2 =
    new CharacterField(message, HEADERSIZE + 40, 1, "H01WK2");
    fields[8] = fieldH01WK3 =
    new CharacterField(message, HEADERSIZE + 41, 1, "H01WK3");
    fields[9] = fieldE01NPR =
    new DecimalField(message, HEADERSIZE + 42, 13, 0, "E01NPR");
    fields[10] = fieldE01CUN =
    new DecimalField(message, HEADERSIZE + 55, 10, 0, "E01CUN");
    fields[11] = fieldE01IDN =
    new CharacterField(message, HEADERSIZE + 65, 25, "E01IDN");
    fields[12] = fieldE01TID =
    new CharacterField(message, HEADERSIZE + 90, 4, "E01TID");
    fields[13] = fieldE01RTP =
    new CharacterField(message, HEADERSIZE + 94, 1, "E01RTP");
    fields[14] = fieldE01STS =
    new CharacterField(message, HEADERSIZE + 95, 2, "E01STS");
    fields[15] = fieldE01EMA =
    new CharacterField(message, HEADERSIZE + 97, 60, "E01EMA");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field H01USR using a String value.
  */
  public void setH01USR(String newvalue)
  {
    fieldH01USR.setString(newvalue);
  }

  /**
  * Get value of field H01USR as a String.
  */
  public String getH01USR()
  {
    return fieldH01USR.getString();
  }

  /**
  * Set field H01PGM using a String value.
  */
  public void setH01PGM(String newvalue)
  {
    fieldH01PGM.setString(newvalue);
  }

  /**
  * Get value of field H01PGM as a String.
  */
  public String getH01PGM()
  {
    return fieldH01PGM.getString();
  }

  /**
  * Set field H01TIM using a String value.
  */
  public void setH01TIM(String newvalue)
  {
    fieldH01TIM.setString(newvalue);
  }

  /**
  * Get value of field H01TIM as a String.
  */
  public String getH01TIM()
  {
    return fieldH01TIM.getString();
  }

  /**
  * Set field H01SCR using a String value.
  */
  public void setH01SCR(String newvalue)
  {
    fieldH01SCR.setString(newvalue);
  }

  /**
  * Get value of field H01SCR as a String.
  */
  public String getH01SCR()
  {
    return fieldH01SCR.getString();
  }

  /**
  * Set field H01OPE using a String value.
  */
  public void setH01OPE(String newvalue)
  {
    fieldH01OPE.setString(newvalue);
  }

  /**
  * Get value of field H01OPE as a String.
  */
  public String getH01OPE()
  {
    return fieldH01OPE.getString();
  }

  /**
  * Set field H01MAS using a String value.
  */
  public void setH01MAS(String newvalue)
  {
    fieldH01MAS.setString(newvalue);
  }

  /**
  * Get value of field H01MAS as a String.
  */
  public String getH01MAS()
  {
    return fieldH01MAS.getString();
  }

  /**
  * Set field H01WK1 using a String value.
  */
  public void setH01WK1(String newvalue)
  {
    fieldH01WK1.setString(newvalue);
  }

  /**
  * Get value of field H01WK1 as a String.
  */
  public String getH01WK1()
  {
    return fieldH01WK1.getString();
  }

  /**
  * Set field H01WK2 using a String value.
  */
  public void setH01WK2(String newvalue)
  {
    fieldH01WK2.setString(newvalue);
  }

  /**
  * Get value of field H01WK2 as a String.
  */
  public String getH01WK2()
  {
    return fieldH01WK2.getString();
  }

  /**
  * Set field H01WK3 using a String value.
  */
  public void setH01WK3(String newvalue)
  {
    fieldH01WK3.setString(newvalue);
  }

  /**
  * Get value of field H01WK3 as a String.
  */
  public String getH01WK3()
  {
    return fieldH01WK3.getString();
  }

  /**
  * Set field E01NPR using a String value.
  */
  public void setE01NPR(String newvalue)
  {
    fieldE01NPR.setString(newvalue);
  }

  /**
  * Get value of field E01NPR as a String.
  */
  public String getE01NPR()
  {
    return fieldE01NPR.getString();
  }

  /**
  * Set numeric field E01NPR using a BigDecimal value.
  */
  public void setE01NPR(BigDecimal newvalue)
  {
    fieldE01NPR.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E01NPR as a BigDecimal.
  */
  public BigDecimal getBigDecimalE01NPR()
  {
    return fieldE01NPR.getBigDecimal();
  }

  /**
  * Set field E01CUN using a String value.
  */
  public void setE01CUN(String newvalue)
  {
    fieldE01CUN.setString(newvalue);
  }

  /**
  * Get value of field E01CUN as a String.
  */
  public String getE01CUN()
  {
    return fieldE01CUN.getString();
  }

  /**
  * Set numeric field E01CUN using a BigDecimal value.
  */
  public void setE01CUN(BigDecimal newvalue)
  {
    fieldE01CUN.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E01CUN as a BigDecimal.
  */
  public BigDecimal getBigDecimalE01CUN()
  {
    return fieldE01CUN.getBigDecimal();
  }

  /**
  * Set field E01IDN using a String value.
  */
  public void setE01IDN(String newvalue)
  {
    fieldE01IDN.setString(newvalue);
  }

  /**
  * Get value of field E01IDN as a String.
  */
  public String getE01IDN()
  {
    return fieldE01IDN.getString();
  }

  /**
  * Set field E01TID using a String value.
  */
  public void setE01TID(String newvalue)
  {
    fieldE01TID.setString(newvalue);
  }

  /**
  * Get value of field E01TID as a String.
  */
  public String getE01TID()
  {
    return fieldE01TID.getString();
  }

  /**
  * Set field E01RTP using a String value.
  */
  public void setE01RTP(String newvalue)
  {
    fieldE01RTP.setString(newvalue);
  }

  /**
  * Get value of field E01RTP as a String.
  */
  public String getE01RTP()
  {
    return fieldE01RTP.getString();
  }

  /**
  * Set field E01STS using a String value.
  */
  public void setE01STS(String newvalue)
  {
    fieldE01STS.setString(newvalue);
  }

  /**
  * Get value of field E01STS as a String.
  */
  public String getE01STS()
  {
    return fieldE01STS.getString();
  }

  /**
  * Set field E01EMA using a String value.
  */
  public void setE01EMA(String newvalue)
  {
    fieldE01EMA.setString(newvalue);
  }

  /**
  * Get value of field E01EMA as a String.
  */
  public String getE01EMA()
  {
    return fieldE01EMA.getString();
  }

}
